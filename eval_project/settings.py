"""
Django settings for eval_project project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""
import json
import os
from django.contrib.messages import constants as messages

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '+#z9@$brqm+z*@4me@wrl9ud)rjcqz7s-m+q#gm$pgpd#g%s^s'

# SECURITY WARNING: don't run with debug turned on in production!
# Will have to run with --insecure to serve static files.
DEBUG = True

# import socket
# try:
#     HOSTNAME = socket.gethostbyname(socket.gethostname())
# except:

HOSTNAME = 'localhost'

ALLOWED_HOSTS = [HOSTNAME, '127.0.0.1']

# Application definition
PROJECT_APPS = ['easy_maps',
                'map_app',
                'django_tables2',
                'static_precompiler',
                'oauth2client',
                'googleapiclient',
                'geopy',
                'django_bootstrap_breadcrumbs',
                ]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.sites',
    'registration',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
] + PROJECT_APPS

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'eval_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'eval_project.wsgi.application'

TEST_RUNNER = 'eval_project.test_runner.DisableLoggingTestRunner'

# Breadcrumb template
BREADCRUMBS_TEMPLATE = 'django_bootstrap_breadcrumbs/bootstrap3.html'

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Update the messages error tag for bootstrap
messages.DEFAULT_TAGS.update({messages.ERROR: 'danger'})

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'static_precompiler.finders.StaticPrecompilerFinder',
)

# Allow collectstatic find the precompiled files.
STATIC_PRECOMPILER_FINDER_LIST_FILES = True

STATIC_PRECOMPILER_COMPILERS = (
    ('static_precompiler.compilers.Babel',
        {'executable': os.path.join('node_modules', '.bin', 'babel'),
         'sourcemap_enabled': True}
     ),
)

COOKIE_SALT = 'test_salt'

# Folder to store the compiled files using the STATIC_ROOT
STATIC_PRECOMPILER_OUTPUT_DIR = 'compiled'

GOOGLE_API_KEYS_FILE_PATH = os.path.join(BASE_DIR, 'google_api_keys.json')

GOOGLE_API_KEYS_JSON_FILE = (None if not
                             os.path.exists(GOOGLE_API_KEYS_FILE_PATH)
                             else json.load(open(GOOGLE_API_KEYS_FILE_PATH)))

if GOOGLE_API_KEYS_JSON_FILE is not None:
    EASY_MAPS_GOOGLE_MAPS_API_KEY = GOOGLE_API_KEYS_JSON_FILE['maps-api-key']

    GOOGLE_FUSION_TABLE_API_KEY = (
        GOOGLE_API_KEYS_JSON_FILE['fusion-table-api-key'])

    SECRET = GOOGLE_API_KEYS_JSON_FILE['client-secret']
else:
    EASY_MAPS_GOOGLE_MAPS_API_KEY = os.environ.get(
        'EASY_MAPS_GOOGLE_MAPS_API_KEY', '')

    GOOGLE_FUSION_TABLE_API_KEY = os.environ.get(
        'GOOGLE_FUSION_TABLE_API_KEY', '')

    SECRET = os.environ.get('SECRET', '')

VIEW_GOOGLE_MAP_LINK = ('https://www.google.com/maps/search/'
                        '?api=1&map_action=map')

GOOGLE_OAUTH2_CLIENT_SECRETS_JSON = os.path.join(BASE_DIR, 'client_id.json')

GOOGLE_OAUTH2_CLIENT_SECRETS_JSON_OBJ = (
    None if not os.path.exists(GOOGLE_OAUTH2_CLIENT_SECRETS_JSON)
    else json.load(open(GOOGLE_OAUTH2_CLIENT_SECRETS_JSON))
)

if GOOGLE_OAUTH2_CLIENT_SECRETS_JSON_OBJ:
    CLIENT_ID = GOOGLE_OAUTH2_CLIENT_SECRETS_JSON_OBJ['web']['client_id']
else:
    CLIENT_ID = os.environ.get('CLIENT_ID')

FUSION_TABLE_SCOPE = 'https://www.googleapis.com/auth/fusiontables'

# Before changing the PORT change the callback uri needs to be updated at
# https://console.developers.google.com/apis/credentials
OAUTH2_CLIENT_REDIRECT_PATH = 'http://{}:8000/oauth2callback'.format(HOSTNAME)
# Set the fusion table id
FUSION_TABLE_ID = '1LEZrMwrTo0ASHryoo-5FtxnqfG0MIrhCt8ljSkNj'


# Enable django sites
# https://docs.djangoproject.com/en/1.9/ref/contrib/sites/#enabling-the-sites-framework
# Refer to map_app.decorators.update_site_info
SITE_ID = 1
SITE_NAME = HOSTNAME
SITE_DOMAIN = '{}:8000'.format(HOSTNAME)


# Settings for django-registration-redux
# ---------------------------------------------------
REGISTRATION_OPEN = True        # If True, users can register
ACCOUNT_ACTIVATION_DAYS = 7     # One-week activation window
REGISTRATION_AUTO_LOGIN = True
LOGIN_REDIRECT_URL = 'home'
LOGIN_URL = '/accounts/login/'
ACCOUNT_AUTHENTICATED_REGISTRATION_REDIRECTS = True
# REGISTRATION_USE_SITE_EMAIL = True
# Registration emails will be sent in format admin@host
# 3REGISTRATION_SITE_USER_EMAIL = 'admin'
# Send registration email in False text or True html format
REGISTRATION_EMAIL_HTML = True
# Use django.contrib.auth.views
INCLUDE_AUTH_URLS = True

# To test locally run
# python -m smtpd -n -c DebuggingServer localhost:1025
# From registration email
REGISTRATION_DEFAULT_FROM_EMAIL = '{}@test.com'.format(HOSTNAME)
DEFAULT_FROM_EMAIL = REGISTRATION_DEFAULT_FROM_EMAIL
# Set the email backend
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# Email connect to host
EMAIL_HOST = HOSTNAME
# Email port
EMAIL_PORT = 1025
# Email user to send the mail from
EMAIL_HOST_USER = '{}@test.com'.format(HOSTNAME)
# Email user password
EMAIL_HOST_PASSWORD = ''
# Enable TLS
EMAIL_USE_TLS = False
# ---------------------------------------------------


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': ('[%(asctime)s %(thread)d %(name)s %(module)s] '
                       '%(levelname)s : %(message)s'),
            'datefmt': '%a, %d/%b/%Y %H:%M:%S'
        },
        'simple': {
            'format': '[%(asctime)s %(module)s] %(levelname)s : %(message)s',
            'datefmt': '%a, %d/%b/%Y  %H:%M:%S'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': ('simple' if not DEBUG else 'verbose')
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': True
        },
        'map_app': {
            'handlers': ['console'],
            'level': ('DEBUG' if DEBUG else 'INFO')
        },
        'easy_maps': {
            'handlers': ['console'],
            'level': ('DEBUG' if DEBUG else 'INFO')
        }
    },
}
